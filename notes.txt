1. 10/29 Tuesday
-End of every single class, fill out exit ticket
-if bathroom, turn off video and turn back on when come back
-keyboard shortcuts!  = brownie points
-rmdir vs 'rm -r' ??
  - rmdir only works if the directory is empty
  - be SUPER CAREFUL with 'rm -r' <- dangerous, can brick your computer

2. 10/31 Thursday
-cloned course-materials rep
-interpreted means it skips the compiling step (i.e. lower-level programming languages)
-name variables that make sense... i.e. not 'x = Fred'
-STRING INTERPOLATION:
 -like filling in the blank in a form letter
 -like my name is ______
 -put 'f' in front of variable name, and you can use {name} to print(f'Hello {name}')
   - f stands for Formatted String
   - you can do print(f'The result is { 3 * 3 }')


???
What can you do with a NONE variable?

3. 11/5 Tuesday
- lexigraphically, a > z, and A > a (Capitalized letters sequentially are less than lowercase)
-shorthand for comparing variables:
-- if a or b: 
--- is the same as saying if a or b == True
-- Similarly, saying if a or b == False can be written as:
--- if not(x) or not(b):

4. 11/7 Thursday
- Access elements of a list with index number
- FOR LOOPS
	- syntax: for item in list
	- item becomes a variable, for is keyword, in, list
	- can loop through several variables:
		- lists
		- strings
- WHAT does range(5) output mean??? it returns "range(0, 5)"
- COMMENT A WHOLE BLOCK OF CODE: select block of text command + /
- can index with a negative, (negative -1 stars with last item in list)
- Jeff Atwood is the founder of StackOverflow
- review EXITING A LOOP logic... "while True" is an infinite loop, so we must break out of the loop.  BREAK will break us out of the entire "while" loop, not just a conditional if
- CONTINUE means go on to the next loop, (start loop over from beginning) without doing whatever is after.. basically start the loop over..  THIS is like "skip if"
- PASS will do nothing... this is a "No Op".. no operation.. "This page in tentionally left blank"

5. 11/12 Tuesday
- dividing anything always results in a float (implicit type conversion)
- EXPLICIT type conversion with int() float() str()
- doing anything with a float will result in a float
- formatting float x with  x:.#f is actually rounding
- to add a decimal, just do :,, don't need to do :,d
- FUNCTIONS
	- return will store the output in memory
	- if your function is just a PRINT, it will immediately forget the value
	- return statement will EXIT the funtion with the return value
??? in fizzbuzz example, if your function includes for loop and uses print instead of return, why does the last value return as "None"???

6. 11/14 THURSDAY
- try out the %timeit() function
SETS
- use {}
- ???? Sets are powerful beca use operations can be applied to them in O(1) time
- you can use enumerate function with a set or list
- in a set, we do not .append, we .add
- .pop will remove a random element in a list
- .remove allows you to remove a specific element in the set, but this will throw an error if element is not present
- .discard will check if it exists and if it doesn't it will not throw an error
- you cannot save a .remove'ed item to a variable and bring it back... it will return "None" [.pop returns the .pop'ed variable]
- ???? what is the "hashing trick" under the hood that dictionaries use???
- commutative means order does not matter (set1.intersect(set2) == set2.intersect(set1)
- .difference is NOT commutative.  difference is what does set1 have that set2 does not have
DICTIONARIES
- use {} just like SETS, but the internals are what matters  
- FOR LOOPS in dictionaries iterate through the KEYS, rather than index
- .items will return key and value

7. 11/19 TUESDAY
VARIABLE SCOPE
- Fred is sometimes a professional DJ and a helicopter landed next to his apartment
- python uses INSIDE-OUT for scope (local -> global)
- AVOID global variables whenever possible
- ??? so even if every function needs access to the same variable, is it better to be redundant and repeat a local variable for every function?
- local variables exist only as a way to temporarily remember data
DEBUGGING
- IndexError is a misspecified index
- NameError is usually a typo in variable or variable that doesn't exist in scope
- KeyError is trying to access a key in a dictionary that doesn't exist (spelling, case sensitive, etc)
- SPACES are the accepted industry standard (don't use tabs!)
- ????? while statements do not create local variables
CATCHING ERRORS
- ??? is while my_num is None the same as my_num == None
--- you would only use 'is' in the above if you are evaluating if "None", i.e. when you are starting with somethign that is "None"
--->> == compares VALUES of both the OPERAND and checks for value equality
--->> "is" checks whether both operands refer to the same object or not
INTRO TO OBJECT ORIENTED PROGRAMMING

8. 11/21, Thursday
INTRO TO OBJECT ORIENTED PROGRAMMING
-objects have two parts:
---STATE: car make, model, dirtiness, condition, on/off
---BEHAVIOR: anything that the object can do, or that can be DONE to the object (eat, sleep, run, be pet,  be fed)
- behavior doesn't have to change state necessarily
- some states never change (breed, species)
- the idea of a blueprint is a CLASS
CLASSES
- name of a class must be Capital First Letter
- INSTANCE: after defining a class, you can create an INSTANCE Of that class < c1 = Cat() >, we have instantiated a cat
- we can name this cat, and give it age --we give the instance STATE
--- cats now have different name and age variables (attributes), containing different values
-----> these are INSTANCE VARIABLES: a variable that is attached to an instace
__init__
- init runs every time an instance of Cat() is created
- requires self as a parameter
- Cat() is a CONSTRUCTOR, used to create INSTANCES
- self refers to the instance that is currently under construction
-- so when you have __init__(self, name, age), you write self.name, self.age]
- self.name = name ----> the thing on the right hand side of the = must equal the parameter
- good practice to have self.name = name (consistent naming in parameter and instance variable)
METHOD is a function that is attached to an object
- can set default value in __init__(self, name, age=1) --> if we do not give an instance an age, it will = 1
- every method needs a SELF parameter
- every method inside a class can access every instance variable
INHERITANCE
???-sSN example... super will inherit everything from the super class, even if you only pass in specific traits
- you can override parent level function with child level function if they have the same name
- review the inheritance code and presentation

9. CLASS VARIABLES AND METHODS
- Objects have STATE and BEHAVIOR (that can modify states)
- INSTANCE is a specific type of object
-- we make INSTANCES from CLASSES (Blueprint)
- one class can instantiate many instances
- <list.sort> MODIFIES the actual list IN PLACE, unlike "capitalize" or "upper" does not change the string object IN PLACE, it just returns the value of the method. 
-  magic method .__add__() is the same as syntactical sugar "+"
- parent of integer, string, float (all BASE classes) is the OBJECT class
SECOND TYPE OF OBJECT
- CLASSES are also objects
- Non-Instance Data (not all data belongs inside an instance)
- some times we want data defined at the class level (instances don't necessarily care about what other instance data)
- you can also define state of a class
- local variable is a variable defined inside a function
- accepted convention for classes is:
  1. init
  2. class methods
  3. instance methods
- PYTHON COMMANDMENT:  Cannot modify list while you're iterating through it
--- code WILL run, but it will not be the expected result


10.  Tuesday, December 03, 2019
SCRIPTING
- Library/Package is multiple MODULES.  Module is just one thing (i.e. random)
- brew is for mac, pip is for python only 

11. Thursday, December 05, 2019
INTRO TO HTTP
- HTTP requests are responded to with HTTP Responses (typically HTML)
- HTTP is the protocol that the web runs of
--- HyperText Transfer Protocol
- formalized way of making request / response on the Web
- Web != Internet
- web browsers implement client side of protocol
- websites implement server side of protocol
- inspect request and responses > inspect element, network tab
- json is more compact that xml
- take API, assign to url vairable, check response, assign response to requests.get(url).  assign dict variable to response.json() {insstead of using the loads method}
- can now access the dict 
----Decoding JSON with the requests Module <== Practice this in REPL

12.  Tuesday December 10, 2019
ADVANCED FUNCTIONS ARGUMENTS
- KWARGS:  positional arguments must come first.  positional arguments are assigned in seqeuntial order
- *ARGS: put as many arguments as you want
-- even accepts no arguments
-- gives you a list inside args
- **KWARGS: take in a variable # of keyword arguments
-- gives you a dictionary 'kwargs'
- OAuth is complicated and involves excahnge of tokens
- 

13.  Missed class 

14.  TUESDAY DECEMBER 17, 2019
PANDAS / VISUALIZATION
- pandas automatically asigns a numbers to each row of its data 
- index column has no name
- put semicolon at end of .plot to get rid of weird stuff outputting 
- data is always used as y axis, the index is always the x-axis

15. THURSDAY DECEMBER 19, 2019
PANDAS PART 2
- , inplace=True???
- to convert something into a dataframe ==> pd.DataFrame( XXX ) will convert
- .dropna() returns a series
---it does not do it "inplace".. does not modify original series
---value_counts() also does not make changes in place
---so value_counts(dropna=False) accomplishes same thing
- if you change the dataset with inPlace, you have to re-read the data back into your program in order to restore to original condition
- .groupby creates an instance of dataFrameGroupBy

16. THURSDAY JANUARY 1, 2020
- pd.to_datetime for all my date data
- how many crimes per month? Groupby?
- maybe do 5000-10000 rows


18. THURSDAY, JANUARY 9, 2020
- -  
