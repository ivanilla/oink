1. 10/29 Tuesday
-End of every single class, fill out exit ticket
-if bathroom, turn off video and turn back on when come back
-keyboard shortcuts!  = brownie points
-rmdir vs 'rm -r' ??
  - rmdir only works if the directory is empty
  - be SUPER CAREFUL with 'rm -r' <- dangerous, can brick your computer

2. 10/31 Thursday
-cloned course-materials rep
-interpreted means it skips the compiling step (i.e. lower-level programming languages)
-name variables that make sense... i.e. not 'x = Fred'
-STRING INTERPOLATION:
 -like filling in the blank in a form letter
 -like my name is ______
 -put 'f' in front of variable name, and you can use {name} to print(f'Hello {name}')
   - f stands for Formatted String
   - you can do print(f'The result is { 3 * 3 }')


???
What can you do with a NONE variable?

3. 11/5 Tuesday
- lexigraphically, a > z, and A > a (Capitalized letters sequentially are less than lowercase)
-shorthand for comparing variables:
-- if a or b: 
--- is the same as saying if a or b == True
-- Similarly, saying if a or b == False can be written as:
--- if not(x) or not(b):

4. 11/7 Thursday
- Access elements of a list with index number
- FOR LOOPS
	- syntax: for item in list
	- item becomes a variable, for is keyword, in, list
	- can loop through several variables:
		- lists
		- strings
- WHAT does range(5) output mean??? it returns "range(0, 5)"
- COMMENT A WHOLE BLOCK OF CODE: select block of text command + /
- can index with a negative, (negative -1 stars with last item in list)
- Jeff Atwood is the founder of StackOverflow
- review EXITING A LOOP logic... "while True" is an infinite loop, so we must break out of the loop.  BREAK will break us out of the entire "while" loop, not just a conditional if
- CONTINUE means go on to the next loop, (start loop over from beginning) without doing whatever is after.. basically start the loop over..  THIS is like "skip if"
- PASS will do nothing... this is a "No Op".. no operation.. "This page in tentionally left blank"

5. 11/12 Tuesday
- dividing anything always results in a float (implicit type conversion)
- EXPLICIT type conversion with int() float() str()
- doing anything with a float will result in a float
- formatting float x with  x:.#f is actually rounding
- to add a decimal, just do :,, don't need to do :,d
- FUNCTIONS
	- return will store the output in memory
	- if your function is just a PRINT, it will immediately forget the value
	- return statement will EXIT the funtion with the return value
??? in fizzbuzz example, if your function includes for loop and uses print instead of return, why does the last value return as "None"???

6. 11/14 THURSDAY
- try out the %timeit() function
SETS
- use {}
- ???? Sets are powerful beca use operations can be applied to them in O(1) time
- you can use enumerate function with a set or list
- in a set, we do not .append, we .add
- .pop will remove a random element in a list
- .remove allows you to remove a specific element in the set, but this will throw an error if element is not present
- .discard will check if it exists and if it doesn't it will not throw an error
- you cannot save a .remove'ed item to a variable and bring it back... it will return "None" [.pop returns the .pop'ed variable]
- ???? what is the "hashing trick" under the hood that dictionaries use???
- commutative means order does not matter (set1.intersect(set2) == set2.intersect(set1)
- .difference is NOT commutative.  difference is what does set1 have that set2 does not have
DICTIONARIES
- use {} just like SETS, but the internals are what matters  
- FOR LOOPS in dictionaries iterate through the KEYS, rather than index
- .items will return key and value

7. 11/19 TUESDAY
VARIABLE SCOPE
- Fred is sometimes a professional DJ and a helicopter landed next to his apartment
- python uses INSIDE-OUT for scope (local -> global)
- AVOID global variables whenever possible
- ??? so even if every function needs access to the same variable, is it better to be redundant and repeat a local variable for every function?
- local variables exist only as a way to temporarily remember data
DEBUGGING
- IndexError is a misspecified index
- NameError is usually a typo in variable or variable that doesn't exist in scope
- KeyError is trying to access a key in a dictionary that doesn't exist (spelling, case sensitive, etc)
- SPACES are the accepted industry standard (don't use tabs!)
- ????? while statements do not create local variables
CATCHING ERRORS
- ??? is while my_num is None the same as my_num == None
--- you would only use 'is' in the above if you are evaluating if "None", i.e. when you are starting with somethign that is "None"
--->> == compares VALUES of both the OPERAND and checks for value equality
--->> "is" checks whether both operands refer to the same object or not
INTRO TO OBJECT ORIENTED PROGRAMMING
- 
